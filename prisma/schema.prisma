generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId 
  uuid           String           @unique(map: "uuid")
  email          String           @unique(map: "email")
  password       String           
  avatar         String?          
  permissions    String?           
  first_name     String           
  last_name      String           
  role           Role             @default(GENERAL)
  email_verified Boolean             @default(false)
  is_active      Boolean             @default(true)
  last_login     DateTime?        @db.Date
  created_at     DateTime         @db.Date @default(now())
  deleted_at     DateTime?        @db.Date
  updated_at     DateTime?        @db.Date
  refresh_tokens refresh_tokens[]
  sessions       sessions[]
  provider_users provider_users[]
}

model provider_users {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  provider         Provider
  provider_user_id String    @unique(map: "provider_user_id")
  user             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          String    @db.ObjectId
  updated_at       DateTime? @db.Date
}

model sessions {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String    @db.ObjectId
  sid          String    @unique(map: "sid")
  start_time   DateTime  @db.Date @default(now())
  end_time     DateTime? @db.Date
  access_token String    
  csrf_token   String    
  is_active    Boolean
  ip_address   String
  updated_at   DateTime? @db.Date
}

enum Role {
  SUPER_ADMIN
  ADMIN
  SHOP_ADMIN
  SHOP_STAFF
  GENERAL
}

enum Provider {
  GOOGLE
}

model refresh_tokens {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  token_id     String    @unique(map: "token_id") 
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String    @db.ObjectId
  is_active    Boolean
  date_created DateTime  @db.Date @default(now())
  updated_at   DateTime? @db.Date
}

model one_time_tokens {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  token_id     String     @unique(map: "token_id")
  token_type   tokenType?
  expires_at   DateTime   @db.Date
  date_created DateTime   @db.Date @default(now())
  updated_at   DateTime?  @db.Date
}

enum tokenType {
  RESET
}

///For Washpoint 

model Merchants {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  merchantCode    String        @unique(map: "merchantCode") 
  merchantName    String?        
  appKey          String?
  appSecret       String?
  contact         Contacts[] 
  branchs         Branchs[]
  devices         Devices[]
  createdAt       DateTime      @db.Date @default(now())
  updatedAt       DateTime?     @updatedAt
}

model Branchs {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  branchCode    String       @unique(map: "branchCode") 
  branchName    String?      
  contacts      Contacts[]
  assets        Assets[]
  products      Products[]
  merchant      Merchants?   @relation(fields:[merchantCode], references:[merchantCode], onDelete:Cascade)
  merchantCode  String?
  createdAt     DateTime     @db.Date @default(now())
  updatedAt     DateTime?    @updatedAt
}


model Contacts {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String         
  lastName        String         
  mobile1         String         
  mobile2         String         
  email1          String         
  email2          String         
  line            String         
  facebook        String         
  instagram       String         
  whatapp         String         
  addresses       Addresses[]
  merchant        Merchants?     @relation(fields:[merchantCode] ,references:[merchantCode], onDelete:Cascade)
  merchantCode    String?           
  branch          Branchs?       @relation(fields:[branchCode], references:[branchCode], onDelete:Cascade)
  branchCode      String?      
  createdAt       DateTime       @db.Date @default(now())
  updatedAt       DateTime?      @updatedAt     
}

model Addresses {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  address1      String      
  address2      String      
  district      String      
  county        String      
  province      String      
  zip           String      
  location_lat  String      
  location_long String      
  contact       Contacts?   @relation(fields:[contactId], references:[id], onDelete:Cascade)
  contactId     String?     @db.ObjectId
  createdAt     DateTime    @db.Date @default(now())
  updatedAt     DateTime?   @updatedAt     
}

model Assets {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  assetCode     String        @unique(map: "assetCode")
  assetName     String?       
  assetStatus   AssetStatus   @default(OFFLINE)
  products      Products[]      
  machine       Machines?
  device        Devices?       
  config        Configs?      @relation(fields:[configCode], references:[configCode], onDelete:SetNull, onUpdate:Cascade)     
  configCode    String?
  branch        Branchs?      @relation(fields: [branchCode], references: [branchCode], onDelete: Cascade)
  branchCode    String? 
  createdAt     DateTime      @db.Date @default(now())
  updatedAt     DateTime?     @updatedAt       
}

model Machines {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  serialNumber  String?       @unique(map: "serialNumber")
  type          MachineType?  
  model         String?       
  orderAt       DateTime?     @db.Date
  expireAt      DateTime?     @db.Date
  asset         Assets?       @relation(fields:[assetCode], references:[assetCode], onDelete:SetNull, onUpdate:Cascade)
  assetCode     String?       @unique
  createdAt     DateTime      @db.Date @default(now())
  updatedAt     DateTime?     @updatedAt  
}

model Products {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  sku           String      @unique(map: "sku") 
  dispName      String?        // such as Cold , Worm, Hot
  description   String?    
  qty           Int         @default(0)    // Can be piece or amount of time base on setting unit
  unit          String       // unit also use to identify qty. such as unit is mins(minutes) and qty is 60 mean 
  price         Float       @db.Double @default(0)
  asset         Assets?     @relation(fields:[assetCode], references:[assetCode], onDelete:SetNull, onUpdate:Cascade)
  assetCode     String?     @unique       
  branch        Branchs?    @relation(fields:[branchCode], references:[branchCode], onDelete:SetNull , onUpdate:Cascade)
  branchCode    String?
  createdAt     DateTime    @db.Date @default(now())
  updatedAt     DateTime?   @updatedAt  
}

model Devices {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  deviceMac         String         @unique(map: "deviceMac") 
  shortMac          String?       
  tasmotaName       String?         
  firmware          String?        
  deviceState       DeviceState?   @default(REGISTERED)
  replaceBy         String?        
  replaceDate       DateTime?            
  merchant          Merchants?     @relation(fields:[merchantCode], references:[merchantCode], onDelete:Cascade , onUpdate:Cascade)
  merchantCode      String?
  asset             Assets?        @relation(fields:[assetCode], references:[assetCode], onDelete:SetNull, onUpdate:Cascade)
  assetCode         String?        @unique
  createdAt         DateTime       @db.Date @default(now())
  updatedAt         DateTime?      @updatedAt  
}

model LastID {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  merchantCode      String        @unique(map: "merchantCode") 
  branchCode        String        @unique(map: "branchCode") 
  assetName         String        @unique(map: "assetName") 
  createdAt         DateTime      @db.Date @default(now())
  updatedAt         DateTime?     @updatedAt  
}

model Configs {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  configCode        String        @unique(map: "configCode") 
  hostCFG           HostConfig[]
  wifiCFG           WifiConfig[]
  mqttCFG           MqttConfig[]
  assets            Assets[]
  createdAt         DateTime      @db.Date @default(now())
  updatedAt         DateTime?     @updatedAt    
}

model HostConfig{
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  appHost           String         @default("flipup.net")
  appPort           String         @default("3000")
  appPath           String         @default("/api")
  config            Configs?      @relation(fields:[configCode], references:[configCode], onDelete:SetNull, onUpdate:Cascade)     
  configCode        String?
  createdAt         DateTime      @db.Date @default(now())
  updatedAt         DateTime?     @updatedAt
}

model WifiConfig{
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  wifiSSID              String        @default("washpoint")
  wifiPass              String        @default("1100110011")
  config            Configs?      @relation(fields:[configCode], references:[configCode], onDelete:SetNull, onUpdate:Cascade)     
  configCode        String?
  createdAt         DateTime      @db.Date @default(now())
  updatedAt         DateTime?     @updatedAt  
}

model MqttConfig{
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  mqttHost          String         @default("flipup.net") 
  mqttUser          String         @default("sammy")
  mqttPass          String         @default("password")
  mqttPort          String         @default("1883")
  publishTopic      String        
  subscribeTopic    String        
  config            Configs?      @relation(fields:[configCode], references:[configCode], onDelete:SetNull, onUpdate:Cascade)     
  configCode        String?
  createdAt         DateTime      @db.Date @default(now())
  updatedAt         DateTime?     @updatedAt   

}

model OrderLog {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  transactionId     String        @unique(map: "transactionID")            
}

enum MachineType {
  WASHER
  DRYER
  WATER
  FUEL
  TOY
  UNDEFINED
  NULL
}

enum DeviceState {
  ACTIVE
  REGISTERED
  OUTSERVICE
  ASSIGNED
  REPLACEBY
}

enum AssetStatus {
  READY
  QUEUE
  BUSY
  OFFLINE
}

/// Washpoint QRcode
model QrTransaction {
  id                                String            @id @default(auto()) @map("_id") @db.ObjectId
  transactionId                     String      @unique(map: "transactionID") 
  method                            Method
  Application                       Application
  mobileNumber                      String      
  nationalID                        String      
  taxID                             String      
  eWalletID                         String      
  bankAccount                       String      
  ota                               String      
  billerID                          String      
  reference1                        String      
  reference2                        String      
  mcc                               String      
  currencyCode                      String      
  amount                            String      
  tip                               String      
  countryCode                       String      
  merchantName                      String      
  merchantCity                      String      
  postalCode                        String      
  additional_billNumber             String      
  additional_mobileNumber           String      
  additional_storeID                String      
  additional_loyaltyNumber          String      
  additional_referenceID            String      
  dditional_customerID              String      
  additional_terminalID             String      
  additional_purposeOfTransaction   String      
  additional_additionalCustomerData String      
  merchantInformation               String      
  sellerTaxBranchID                 String      
  vatRate                           String      
  vatAmount                         String      
  createdAt                         DateTime    @db.Date @default(now())
  updatedAt                         DateTime?   @updatedAt
}

model PaymentWait {
  id                                String            @id @default(auto()) @map("_id") @db.ObjectId
  transactionId                     String          @unique(map: "transactionID") 

}

model PaymentNotify {
  id                                String            @id @default(auto()) @map("_id") @db.ObjectId
  payment_Id                        String?         @unique(map: "payment_Id") 
  payment_shop                      String          
  payment_sender                    String          
  payment_time                      DateTime
  payment_amount                    String          
  payment_message                   String          
}

enum Method {
  QR_STATIC
  QR_DYNAMIC
  BLE_STATIC
  BLE_DYNAMIC
  NFC_STATIC
  NFC_DYNAMIC
}

enum Application {
  PROMPTPAY_CREDIT_TRANSFER
  PROMPTPAY_CREDIT_TRANSFER_WITH_OTA
  PROMPTPAY_BILL_PAYMENT
  PROMPTPAY_BILL_PAYMENT_CROSS_BORDER
}

enum Payment_Status{
  MATCH

}

