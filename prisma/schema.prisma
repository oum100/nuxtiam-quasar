generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique(map: "uuid") @db.VarChar(60)
  email          String           @unique(map: "email") @db.VarChar(255)
  password       String           @db.VarChar(255)
  avatar         String?          @db.VarChar(1000)
  permissions    String?          @db.VarChar(4000)
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  role           Role             @default(GENERAL)
  email_verified Boolean          @default(false)
  is_active      Boolean          @default(true)
  last_login     DateTime?        @db.DateTime(0)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  deleted_at     DateTime?        @db.DateTime(0)
  updated_at     DateTime?        @updatedAt
  refresh_tokens refresh_tokens[]
  sessions       sessions[]
  provider_users provider_users[]
}

model provider_users {
  id               Int       @id @default(autoincrement())
  provider         Provider
  provider_user_id String    @unique(map: "provider_user_id")
  user             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  updated_at       DateTime? @updatedAt
}

model sessions {
  id           Int       @id @default(autoincrement())
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  sid          String    @unique(map: "sid")
  start_time   DateTime  @default(now())
  end_time     DateTime?
  access_token String    @db.VarChar(4000)
  csrf_token   String    @db.VarChar(255)
  is_active    Boolean
  ip_address   String
  updated_at   DateTime? @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  GENERAL
}

enum Provider {
  GOOGLE
}

model refresh_tokens {
  id           Int       @id @default(autoincrement())
  token_id     String    @unique(map: "token_id") @db.VarChar(60)
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  is_active    Boolean
  date_created DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime? @updatedAt
}

model one_time_tokens {
  id           Int        @id @default(autoincrement())
  token_id     String     @unique(map: "token_id") @db.VarChar(60)
  token_type   tokenType?
  expires_at   DateTime   @db.DateTime(0)
  date_created DateTime   @default(now()) @db.DateTime(0)
  updated_at   DateTime?  @updatedAt
}

enum tokenType {
  RESET
}

///For Washpoint 

model merchants {
  id           Int       @id @default(autoincrement())
  merchantCode   String    @unique(map: "merchantCode") @db.VarChar(10)
  merchantName String    @db.VarChar(30)
  apikey       String
  apisecret    String
  contact      contacts[]
  branchs      branchs[]
  devices      devices[]
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime? @updatedAt
}

model branchs {
  id          Int        @id @default(autoincrement())
  branchCode    String     @unique(map: "branchCode") @db.VarChar(5)
  branchName  String     @db.VarChar(30)
  contact     contacts[]
  assets      assets[]
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime?  @updatedAt
  merchant    merchants  @relation(fields:[merchantId], references:[id], onDelete:Cascade)
  merchantId  Int
}


model contacts {
  id          Int           @id @default(autoincrement())
  firstName   String        @db.VarChar(25)
  lastName    String        @db.VarChar(25)
  mobile1     String        @db.VarChar(25)
  mobile2     String        @db.VarChar(25)
  email1      String        @db.VarChar(25)
  email2      String        @db.VarChar(25)
  line        String        @db.VarChar(25)
  facebook    String        @db.VarChar(25)
  instagram   String        @db.VarChar(25)
  whatapp     String        @db.VarChar(25)
  address     addresses[]
  createdAt   DateTime      @default(now()) @db.DateTime(0)
  updatedAt   DateTime?     @updatedAt
  merchant    merchants     @relation(fields:[merchantId] ,references:[id], onDelete:Cascade)
  merchantId  Int           
  branch      branchs       @relation(fields:[branchId], references:[id], onDelete:Cascade)
  branchId    Int           
}

model addresses {
  id            Int       @id @default(autoincrement())
  address1      String    @db.VarChar(255)
  address2      String    @db.VarChar(255)
  district      String    @db.VarChar(25)
  county        String    @db.VarChar(25)
  province      String    @db.VarChar(25)
  zip           String    @db.VarChar(5)
  location_lat  String    @db.VarChar(20)
  location_long String    @db.VarChar(20)
  createdAt     DateTime  @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @updatedAt
  contact       contacts  @relation(fields:[contactId], references:[id], onDelete:Cascade)
  contactId     Int       
}

model assets {
  id            Int           @id @default(autoincrement())
  assetCode       String        @unique(map: "assetCode") @db.VarChar(10)
  assetName     String        @db.VarChar(8)
  assetStatus   assetStatus
  products      products[]      
  machine       machines?
  createdAt     DateTime      @default(now()) @db.DateTime(0)
  updatedAt     DateTime?     @updatedAt  
  branch        branchs       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId      Int     
}

model machines {
  id           Int         @id @default(autoincrement())
  type         MachineType
  serialNumber String      @unique(map: "serialNumber") @db.VarChar(15)
  model        String      @db.VarChar(30)
  buyAt        DateTime    @db.DateTime(0)
  expiresAt    DateTime    @db.DateTime(0)
  createdAt    DateTime    @default(now()) @db.DateTime(0)
  updatedAt    DateTime?   @updatedAt
  device       devices?
  asset        assets      @relation(fields: [assetId], references: [id], onDelete:Cascade)
  assetId      Int         @unique
}

model products {
  id          Int       @id @default(autoincrement())
  sku         String    @db.VarChar(10)
  shortDesc   String    @db.VarChar(4)
  description String
  qty         Int
  price       Float     @db.Float
  unit        String    @db.VarChar(10)
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @updatedAt
  asset       assets    @relation(fields:[assetId], references:[id], onDelete:Cascade)
  assetId     Int       
}

model devices {
  id                Int           @id @default(autoincrement())
  deviceMac         String        @unique(map: "deviceMac") @db.VarChar(17)
  firmware          String        @db.VarChar(15)
  deviceState       DeviceState
  machine           machines      @relation(fields:[machineId], references:[id], onDelete:Cascade)
  machineId         Int           @unique
  merchant          merchants     @relation(fields:[merchantId], references:[id], onDelete:Cascade)
  merchantId        Int
}

enum MachineType {
  WASHER
  DRYER
}

enum DeviceState {
  ACTIVATED
  REGISTERED
  OUTSERVICE
}

enum assetStatus {
  READY
  QUEUE
  BUSY
  OFFLINE
}

/// Washpoint QRcode
model QrTransaction {
  id                                Int         @id @default(autoincrement())
  transactionId                     String      @unique(map: "transactionID") @db.VarChar(60)
  method                            Method
  Application                       Application
  mobileNumber                      String      @db.VarChar(13)
  nationalID                        String      @db.VarChar(13)
  taxID                             String      @db.VarChar(13)
  eWalletID                         String      @db.VarChar(15)
  bankAccount                       String      @db.VarChar(43)
  ota                               String      @db.VarChar(10)
  billerID                          String      @db.VarChar(15)
  reference1                        String      @db.VarChar(20)
  reference2                        String      @db.VarChar(20)
  mcc                               String      @db.VarChar(4)
  currencyCode                      String      @db.VarChar(3)
  amount                            String      @db.VarChar(13)
  tip                               String      @db.VarChar(13)
  countryCode                       String      @db.VarChar(2)
  merchantName                      String      @db.VarChar(25)
  merchantCity                      String      @db.VarChar(15)
  postalCode                        String      @db.VarChar(10)
  additional_billNumber             String      @db.VarChar(26)
  additional_mobileNumber           String      @db.VarChar(26)
  additional_storeID                String      @db.VarChar(26)
  additional_loyaltyNumber          String      @db.VarChar(26)
  additional_referenceID            String      @db.VarChar(26)
  dditional_customerID              String      @db.VarChar(26)
  additional_terminalID             String      @db.VarChar(26)
  additional_purposeOfTransaction   String      @db.VarChar(26)
  additional_additionalCustomerData String      @db.VarChar(3)
  merchantInformation               String      @db.VarChar(99)
  sellerTaxBranchID                 String      @db.VarChar(4)
  vatRate                           String      @db.VarChar(5)
  vatAmount                         String      @db.VarChar(13)
  createdAt                         DateTime    @default(now()) @db.DateTime(0)
  updatedAt                         DateTime?   @updatedAt
}

model paymentWait {
  id                                Int             @id @default(autoincrement())
  transactionId                     String          @unique(map: "transactionID") @db.VarChar(60)

}

model paymentNotify {
  id                                Int             @id @default(autoincrement())
  payment_Id                        String?         @unique(map: "payment_Id") @db.VarChar(60)
  payment_shop                      String          @db.VarChar(25)
  payment_sender                    String          @db.VarChar(25)
  payment_time                      DateTime
  payment_amount                    String          @db.VarChar(13)
  payment_message                   String          @db.VarChar(50)
}

enum Method {
  QR_STATIC
  QR_DYNAMIC
  BLE_STATIC
  BLE_DYNAMIC
  NFC_STATIC
  NFC_DYNAMIC
}

enum Application {
  PROMPTPAY_CREDIT_TRANSFER
  PROMPTPAY_CREDIT_TRANSFER_WITH_OTA
  PROMPTPAY_BILL_PAYMENT
  PROMPTPAY_BILL_PAYMENT_CROSS_BORDER
}

enum Payment_Status{
  MATCH

}